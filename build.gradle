plugins {
	id 'fabric-loom' version '1.6.9'
	id 'babric-loom-extension' version '1.6.10'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	mixin {
		useLegacyMixinAp = true
	}

	customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
	intermediaryUrl.set("https://maven.glass-launcher.net/babric/babric/intermediary/%1\$s/intermediary-%1\$s-v2.jar")

	runs {
		register("testModClient") {
			source("test")
			client()
		}
		register("testModServer") {
			source("test")
			server()
		}
		register("testData") {
			source("test")
			property("datagen.run", "datagen_test")
			property("datagen.path", project.projectDir.toPath().resolve("src/generated/resources/").toAbsolutePath().toString())
			client()
		}
	}
}

repositories {
	// Used for the fabric toolchain in this project.
	maven {
		name = 'Babric'
		url = 'https://maven.glass-launcher.net/babric'
	}
	// Used for mappings.
	maven {
		name = 'Glass Releases'
		url = 'https://maven.glass-launcher.net/releases'
	}
	// Used for StationAPI and HowManyItems.
	maven {
		name = 'Glass Snapshots'
		url = 'https://maven.glass-launcher.net/snapshots'
	}
	// Used for a StationAPI dependency.
	maven {
		name = 'Froge'
		url 'https://maven.minecraftforge.net/'
	}
	// Used for projects that do not have a maven repository, but do have a GitHub repository with working build scripts.
	maven {
		name = 'Jitpack'
		url = 'https://jitpack.io'
	}
	// Used for another StationAPI dependency
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.glasslauncher:biny:${project.yarn_mappings}:v2"
	modImplementation "babric:fabric-loader:${project.loader_version}"

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2'
	implementation "blue.endless:jankson:1.2.1"

	modImplementation "net.modificationstation:StationAPI:${project.stapi_version}"

	// Optional, but convenient mods for mod creators and users alike.
	modImplementation("com.github.calmilamsy:ModMenu:${project.modmenu_version}") {transitive false}
	modImplementation("net.glasslauncher.mods:GlassConfigAPI:${project.gcapi_version}") {transitive false}
	modImplementation("net.glasslauncher:HowManyItems-Fabric-Unofficial:${project.howmanyitems_version}") {transitive false}
}

tasks.withType(Jar).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Copy).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

sourceSets {
	main {
		java {
			srcDir("src/main/java")
		}
		resources {
			srcDir("src/main/resources")
		}
	}
	test {
		java {
			srcDir("src/test/java")
		}
		resources {
			srcDir("src/test/resources")
			srcDir("src/generated/resources")
		}
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	sourceSets {
		exclude("test")
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}
